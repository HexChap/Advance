from PIL.Image import Image
from typing import Tuple, Union, Optional
from pathlib import Path, WindowsPath

from Advance.utils.project_types import ImgsData


class _ImgEditor:
    imgs_data: ImgsData

    def cut_image(self, compress: bool, output_path: Union[str, Path, WindowsPath]) -> ImgsData: ...
    def add_logo(self, change_from_center: tuple, compress: bool, output_path: Union[str, Path, WindowsPath]) -> ImgsData: ...
    def compress_image(self, output_path: Union[str, Path, WindowsPath]) -> ImgsData: ...
    def rename_image(self, new_name: str, output_path: Union[str, Path, WindowsPath]) -> ImgsData: ...


class ImgEditor:
    _editor: _ImgEditor

    def rename_images(self, new_name: str, output_path: Optional[Union[str, Path, WindowsPath]]) -> ImgsData: ...
    def compress_images(self, output_path: Optional[Union[str, Path, WindowsPath]]) -> ImgsData: ...
    def cut_images(self, compress: Optional[bool], output_path: Optional[Union[str, Path, WindowsPath]]) -> ImgsData: ...
    def add_logo(self, change_from_center: tuple, compress: Optional[bool], output_path: Optional[Union[str, Path, WindowsPath]]) -> ImgsData: ...


def _save_image(img: Image, compress: Optional[bool]) -> None: ...
def _get_filename(path: Union[str, Path, WindowsPath]) -> str: ...
def _calc_logo_width(img: Image) -> int: ...
def _calc_logo_coord(img: Image, watermark: Image, change_coords: tuple) -> Tuple[int]: ...
def _resize_with_proportion(img: Image, basewidth: int) -> Image: ...
